/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package cs.superleague.api;

import cs.superleague.models.PaymentGetCustomersActiveOrdersRequest;
import cs.superleague.models.PaymentGetCustomersActiveOrdersResponse;
import cs.superleague.models.PaymentGetItemsRequest;
import cs.superleague.models.PaymentGetItemsResponse;
import cs.superleague.models.PaymentGetStatusRequest;
import cs.superleague.models.PaymentGetStatusResponse;
import cs.superleague.models.PaymentSubmitOrderRequest;
import cs.superleague.models.PaymentSubmitOrderResponse;
import cs.superleague.models.PaymentUpdateOrderRequest;
import cs.superleague.models.PaymentUpdateOrderResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "payment", description = "the payment API")
public interface PaymentApi {

    @ApiOperation(value = "Endpoint for the customers getting their active order", nickname = "getCustomerActiveOrders", notes = "Refer to summary", response = PaymentGetCustomersActiveOrdersResponse.class, tags={ "payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the orderID of the active order", response = PaymentGetCustomersActiveOrdersResponse.class) })
    @RequestMapping(value = "/payment/getCustomersActiveOrders",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<PaymentGetCustomersActiveOrdersResponse> getCustomerActiveOrders(@ApiParam(value = "The input body required by this request" ,required=true )  @Valid @RequestBody PaymentGetCustomersActiveOrdersRequest body
);


    @ApiOperation(value = "Endpoint for Get Items use case", nickname = "getItemsPayments", notes = "Refer to summary", response = PaymentGetItemsResponse.class, tags={ "Payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns status upon success", response = PaymentGetItemsResponse.class) })
    @RequestMapping(value = "/payment/getItems",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<PaymentGetItemsResponse> getItemsPayments(@ApiParam(value = "The input body required by this request" ,required=true )  @Valid @RequestBody PaymentGetItemsRequest body
);


    @ApiOperation(value = "Endpoint for Get Status use case", nickname = "getStatus", notes = "Refer to summary", response = PaymentGetStatusResponse.class, tags={ "Payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns status upon success", response = PaymentGetStatusResponse.class) })
    @RequestMapping(value = "/payment/getStatus",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<PaymentGetStatusResponse> getStatus(@ApiParam(value = "The input body required by this request" ,required=true )  @Valid @RequestBody PaymentGetStatusRequest body
);


    @ApiOperation(value = "Endpoint for the Submit Order use case", nickname = "submitOrder", notes = "Refer to summary", response = PaymentSubmitOrderResponse.class, tags={ "Payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns submitted order upon success", response = PaymentSubmitOrderResponse.class) })
    @RequestMapping(value = "/payment/submitOrder",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<PaymentSubmitOrderResponse> submitOrder(@ApiParam(value = "The input body required by this request" ,required=true )  @Valid @RequestBody PaymentSubmitOrderRequest body
);


    @ApiOperation(value = "Endpoint for the Update Order use case", nickname = "updateOrder", notes = "Refer to summary", response = PaymentUpdateOrderResponse.class, tags={ "Payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns updated order upon success", response = PaymentUpdateOrderResponse.class) })
    @RequestMapping(value = "/payment/updateOrder",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<PaymentUpdateOrderResponse> updateOrder(@ApiParam(value = "The input body required by this request" ,required=true )  @Valid @RequestBody PaymentUpdateOrderRequest body
);

}
