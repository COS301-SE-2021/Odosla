/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package cs.superleague.api;

import cs.superleague.models.DeliveryAddDeliveryDetailRequest;
import cs.superleague.models.DeliveryAddDeliveryDetailResponse;
import cs.superleague.models.DeliveryAssignDriverToDeliveryRequest;
import cs.superleague.models.DeliveryAssignDriverToDeliveryResponse;
import cs.superleague.models.DeliveryCreateDeliveryRequest;
import cs.superleague.models.DeliveryCreateDeliveryResponse;
import cs.superleague.models.DeliveryGetDeliveryByUUIDRequest;
import cs.superleague.models.DeliveryGetDeliveryByUUIDResponse;
import cs.superleague.models.DeliveryGetDeliveryDetailRequest;
import cs.superleague.models.DeliveryGetDeliveryDetailResponse;
import cs.superleague.models.DeliveryGetDeliveryDriverByOrderIdRequest;
import cs.superleague.models.DeliveryGetDeliveryDriverByOrderIdResponse;
import cs.superleague.models.DeliveryGetDeliveryStatusRequest;
import cs.superleague.models.DeliveryGetDeliveryStatusResponse;
import cs.superleague.models.DeliveryGetNextOrderForDriverRequest;
import cs.superleague.models.DeliveryGetNextOrderForDriverResponse;
import cs.superleague.models.DeliveryRemoveDriverFromDeliveryRequest;
import cs.superleague.models.DeliveryRemoveDriverFromDeliveryResponse;
import cs.superleague.models.DeliveryTrackDeliveryRequest;
import cs.superleague.models.DeliveryTrackDeliveryResponse;
import cs.superleague.models.DeliveryUpdateDeliveryStatusRequest;
import cs.superleague.models.DeliveryUpdateDeliveryStatusResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "delivery", description = "the delivery API")
public interface DeliveryApi {

    @ApiOperation(value = "Endpoint for add delivery detail", nickname = "addDeliveryDetail", notes = "Refer to summary", response = DeliveryAddDeliveryDetailResponse.class, tags={ "delivery", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns whether the detail was added and the ID of that detail", response = DeliveryAddDeliveryDetailResponse.class) })
    @RequestMapping(value = "/delivery/addDeliveryDetail",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DeliveryAddDeliveryDetailResponse> addDeliveryDetail(@ApiParam(value = "The input body required by this request" ,required=true )  @Valid @RequestBody DeliveryAddDeliveryDetailRequest body
);


    @ApiOperation(value = "Endpoint for assign driver to delivery", nickname = "assignDriverToDelivery", notes = "Refer to summary", response = DeliveryAssignDriverToDeliveryResponse.class, tags={ "delivery", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns whether the driver was assigned to the delivery", response = DeliveryAssignDriverToDeliveryResponse.class) })
    @RequestMapping(value = "/delivery/assignDriverToDelivery",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DeliveryAssignDriverToDeliveryResponse> assignDriverToDelivery(@ApiParam(value = "The input body required by this request" ,required=true )  @Valid @RequestBody DeliveryAssignDriverToDeliveryRequest body
);


    @ApiOperation(value = "Endpoint for creating a delivery", nickname = "createDelivery", notes = "Refer to summary", response = DeliveryCreateDeliveryResponse.class, tags={ "delivery", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns whether the delivery was created or not", response = DeliveryCreateDeliveryResponse.class) })
    @RequestMapping(value = "/delivery/createDelivery",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DeliveryCreateDeliveryResponse> createDelivery(@ApiParam(value = "The input body required by this request" ,required=true )  @Valid @RequestBody DeliveryCreateDeliveryRequest body
);


    @ApiOperation(value = "Endpoint for retrieving delivery by UUID", nickname = "getDeliveryByUUID", notes = "Refer to summary", response = DeliveryGetDeliveryByUUIDResponse.class, tags={ "Delivery", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the delivery the given ID belong to", response = DeliveryGetDeliveryByUUIDResponse.class) })
    @RequestMapping(value = "/delivery/getDeliveryByUUID",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DeliveryGetDeliveryByUUIDResponse> getDeliveryByUUID(@ApiParam(value = "The input body required by this request" ,required=true )  @Valid @RequestBody DeliveryGetDeliveryByUUIDRequest body
);


    @ApiOperation(value = "Endpoint for getting the detail of a delivery", nickname = "getDeliveryDetail", notes = "Refer to summary", response = DeliveryGetDeliveryDetailResponse.class, tags={ "delivery", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the delivery detail", response = DeliveryGetDeliveryDetailResponse.class) })
    @RequestMapping(value = "/delivery/getDeliveryDetail",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DeliveryGetDeliveryDetailResponse> getDeliveryDetail(@ApiParam(value = "The input body required by this request" ,required=true )  @Valid @RequestBody DeliveryGetDeliveryDetailRequest body
);


    @ApiOperation(value = "Endpoint for get delivery driver by order id use case", nickname = "getDeliveryDriverByOrderId", notes = "Refer to summary", response = DeliveryGetDeliveryDriverByOrderIdResponse.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns delivery and driver", response = DeliveryGetDeliveryDriverByOrderIdResponse.class) })
    @RequestMapping(value = "/delivery/getDeliveryDriverByOrderId",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DeliveryGetDeliveryDriverByOrderIdResponse> getDeliveryDriverByOrderId(@ApiParam(value = "The input body required by this request" ,required=true )  @Valid @RequestBody DeliveryGetDeliveryDriverByOrderIdRequest body
);


    @ApiOperation(value = "Endpoint for getting the status of a delivery", nickname = "getDeliveryStatus", notes = "Refer to summary", response = DeliveryGetDeliveryStatusResponse.class, tags={ "delivery", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the delivery status", response = DeliveryGetDeliveryStatusResponse.class) })
    @RequestMapping(value = "/delivery/getDeliveryStatus",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DeliveryGetDeliveryStatusResponse> getDeliveryStatus(@ApiParam(value = "The input body required by this request" ,required=true )  @Valid @RequestBody DeliveryGetDeliveryStatusRequest body
);


    @ApiOperation(value = "Endpoint for getting the next order for a driver", nickname = "getNextOrderForDriver", notes = "Refer to summary", response = DeliveryGetNextOrderForDriverResponse.class, tags={ "delivery", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the next order for a driver", response = DeliveryGetNextOrderForDriverResponse.class) })
    @RequestMapping(value = "/delivery/getNextOrderForDriver",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DeliveryGetNextOrderForDriverResponse> getNextOrderForDriver(@ApiParam(value = "The input body required by this request" ,required=true )  @Valid @RequestBody DeliveryGetNextOrderForDriverRequest body
);


    @ApiOperation(value = "Endpoint for removing a driver from a delivery", nickname = "removeDriverFromDelivery", notes = "Refer to summary", response = DeliveryRemoveDriverFromDeliveryResponse.class, tags={ "delivery", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns whether the driver was removed from the order", response = DeliveryRemoveDriverFromDeliveryResponse.class) })
    @RequestMapping(value = "/delivery/removeDriverFromDelivery",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DeliveryRemoveDriverFromDeliveryResponse> removeDriverFromDelivery(@ApiParam(value = "The input body required by this request" ,required=true )  @Valid @RequestBody DeliveryRemoveDriverFromDeliveryRequest body
);


    @ApiOperation(value = "Endpoint for tracking a delivery", nickname = "trackDelivery", notes = "Refer to summary", response = DeliveryTrackDeliveryResponse.class, tags={ "delivery", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the location of the delivery", response = DeliveryTrackDeliveryResponse.class) })
    @RequestMapping(value = "/delivery/trackDelivery",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DeliveryTrackDeliveryResponse> trackDelivery(@ApiParam(value = "The input body required by this request" ,required=true )  @Valid @RequestBody DeliveryTrackDeliveryRequest body
);


    @ApiOperation(value = "Endpoint for updating the status of a delivery", nickname = "updateDeliveryStatus", notes = "Refer to summary", response = DeliveryUpdateDeliveryStatusResponse.class, tags={ "delivery", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns whether the status of the delivery was updated", response = DeliveryUpdateDeliveryStatusResponse.class) })
    @RequestMapping(value = "/delivery/updateDeliveryStatus",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DeliveryUpdateDeliveryStatusResponse> updateDeliveryStatus(@ApiParam(value = "The input body required by this request" ,required=true )  @Valid @RequestBody DeliveryUpdateDeliveryStatusRequest body
);

}
