/*
 * Library Service
 * The library service
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeliveryAddDeliveryDetailRequest;
import org.openapitools.client.model.DeliveryAddDeliveryDetailResponse;
import org.openapitools.client.model.DeliveryAssignDriverToDeliveryRequest;
import org.openapitools.client.model.DeliveryAssignDriverToDeliveryResponse;
import org.openapitools.client.model.DeliveryCreateDeliveryRequest;
import org.openapitools.client.model.DeliveryCreateDeliveryResponse;
import org.openapitools.client.model.DeliveryGetDeliveryDetailRequest;
import org.openapitools.client.model.DeliveryGetDeliveryDetailResponse;
import org.openapitools.client.model.DeliveryGetDeliveryStatusRequest;
import org.openapitools.client.model.DeliveryGetDeliveryStatusResponse;
import org.openapitools.client.model.DeliveryGetNextOrderForDriverRequest;
import org.openapitools.client.model.DeliveryGetNextOrderForDriverResponse;
import org.openapitools.client.model.DeliveryRemoveDriverFromDeliveryRequest;
import org.openapitools.client.model.DeliveryRemoveDriverFromDeliveryResponse;
import org.openapitools.client.model.DeliveryTrackDeliveryRequest;
import org.openapitools.client.model.DeliveryTrackDeliveryResponse;
import org.openapitools.client.model.DeliveryUpdateDeliveryStatusRequest;
import org.openapitools.client.model.DeliveryUpdateDeliveryStatusResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeliveryApi {
    private ApiClient localVarApiClient;

    public DeliveryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeliveryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addDeliveryDetail
     * @param deliveryAddDeliveryDetailRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the detail was added and the ID of that detail </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDeliveryDetailCall(DeliveryAddDeliveryDetailRequest deliveryAddDeliveryDetailRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deliveryAddDeliveryDetailRequest;

        // create path and map variables
        String localVarPath = "/delivery/addDeliveryDetail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDeliveryDetailValidateBeforeCall(DeliveryAddDeliveryDetailRequest deliveryAddDeliveryDetailRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deliveryAddDeliveryDetailRequest' is set
        if (deliveryAddDeliveryDetailRequest == null) {
            throw new ApiException("Missing the required parameter 'deliveryAddDeliveryDetailRequest' when calling addDeliveryDetail(Async)");
        }
        

        okhttp3.Call localVarCall = addDeliveryDetailCall(deliveryAddDeliveryDetailRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for add delivery detail
     * Refer to summary
     * @param deliveryAddDeliveryDetailRequest The input body required by this request (required)
     * @return DeliveryAddDeliveryDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the detail was added and the ID of that detail </td><td>  -  </td></tr>
     </table>
     */
    public DeliveryAddDeliveryDetailResponse addDeliveryDetail(DeliveryAddDeliveryDetailRequest deliveryAddDeliveryDetailRequest) throws ApiException {
        ApiResponse<DeliveryAddDeliveryDetailResponse> localVarResp = addDeliveryDetailWithHttpInfo(deliveryAddDeliveryDetailRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for add delivery detail
     * Refer to summary
     * @param deliveryAddDeliveryDetailRequest The input body required by this request (required)
     * @return ApiResponse&lt;DeliveryAddDeliveryDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the detail was added and the ID of that detail </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeliveryAddDeliveryDetailResponse> addDeliveryDetailWithHttpInfo(DeliveryAddDeliveryDetailRequest deliveryAddDeliveryDetailRequest) throws ApiException {
        okhttp3.Call localVarCall = addDeliveryDetailValidateBeforeCall(deliveryAddDeliveryDetailRequest, null);
        Type localVarReturnType = new TypeToken<DeliveryAddDeliveryDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for add delivery detail (asynchronously)
     * Refer to summary
     * @param deliveryAddDeliveryDetailRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the detail was added and the ID of that detail </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDeliveryDetailAsync(DeliveryAddDeliveryDetailRequest deliveryAddDeliveryDetailRequest, final ApiCallback<DeliveryAddDeliveryDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDeliveryDetailValidateBeforeCall(deliveryAddDeliveryDetailRequest, _callback);
        Type localVarReturnType = new TypeToken<DeliveryAddDeliveryDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assignDriverToDelivery
     * @param deliveryAssignDriverToDeliveryRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the driver was assigned to the delivery </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignDriverToDeliveryCall(DeliveryAssignDriverToDeliveryRequest deliveryAssignDriverToDeliveryRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deliveryAssignDriverToDeliveryRequest;

        // create path and map variables
        String localVarPath = "/delivery/assignDriverToDelivery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignDriverToDeliveryValidateBeforeCall(DeliveryAssignDriverToDeliveryRequest deliveryAssignDriverToDeliveryRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deliveryAssignDriverToDeliveryRequest' is set
        if (deliveryAssignDriverToDeliveryRequest == null) {
            throw new ApiException("Missing the required parameter 'deliveryAssignDriverToDeliveryRequest' when calling assignDriverToDelivery(Async)");
        }
        

        okhttp3.Call localVarCall = assignDriverToDeliveryCall(deliveryAssignDriverToDeliveryRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for assign driver to delivery
     * Refer to summary
     * @param deliveryAssignDriverToDeliveryRequest The input body required by this request (required)
     * @return DeliveryAssignDriverToDeliveryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the driver was assigned to the delivery </td><td>  -  </td></tr>
     </table>
     */
    public DeliveryAssignDriverToDeliveryResponse assignDriverToDelivery(DeliveryAssignDriverToDeliveryRequest deliveryAssignDriverToDeliveryRequest) throws ApiException {
        ApiResponse<DeliveryAssignDriverToDeliveryResponse> localVarResp = assignDriverToDeliveryWithHttpInfo(deliveryAssignDriverToDeliveryRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for assign driver to delivery
     * Refer to summary
     * @param deliveryAssignDriverToDeliveryRequest The input body required by this request (required)
     * @return ApiResponse&lt;DeliveryAssignDriverToDeliveryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the driver was assigned to the delivery </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeliveryAssignDriverToDeliveryResponse> assignDriverToDeliveryWithHttpInfo(DeliveryAssignDriverToDeliveryRequest deliveryAssignDriverToDeliveryRequest) throws ApiException {
        okhttp3.Call localVarCall = assignDriverToDeliveryValidateBeforeCall(deliveryAssignDriverToDeliveryRequest, null);
        Type localVarReturnType = new TypeToken<DeliveryAssignDriverToDeliveryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for assign driver to delivery (asynchronously)
     * Refer to summary
     * @param deliveryAssignDriverToDeliveryRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the driver was assigned to the delivery </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignDriverToDeliveryAsync(DeliveryAssignDriverToDeliveryRequest deliveryAssignDriverToDeliveryRequest, final ApiCallback<DeliveryAssignDriverToDeliveryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignDriverToDeliveryValidateBeforeCall(deliveryAssignDriverToDeliveryRequest, _callback);
        Type localVarReturnType = new TypeToken<DeliveryAssignDriverToDeliveryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDelivery
     * @param deliveryCreateDeliveryRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the delivery was created or not </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeliveryCall(DeliveryCreateDeliveryRequest deliveryCreateDeliveryRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deliveryCreateDeliveryRequest;

        // create path and map variables
        String localVarPath = "/delivery/createDelivery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDeliveryValidateBeforeCall(DeliveryCreateDeliveryRequest deliveryCreateDeliveryRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deliveryCreateDeliveryRequest' is set
        if (deliveryCreateDeliveryRequest == null) {
            throw new ApiException("Missing the required parameter 'deliveryCreateDeliveryRequest' when calling createDelivery(Async)");
        }
        

        okhttp3.Call localVarCall = createDeliveryCall(deliveryCreateDeliveryRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for creating a delivery
     * Refer to summary
     * @param deliveryCreateDeliveryRequest The input body required by this request (required)
     * @return DeliveryCreateDeliveryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the delivery was created or not </td><td>  -  </td></tr>
     </table>
     */
    public DeliveryCreateDeliveryResponse createDelivery(DeliveryCreateDeliveryRequest deliveryCreateDeliveryRequest) throws ApiException {
        ApiResponse<DeliveryCreateDeliveryResponse> localVarResp = createDeliveryWithHttpInfo(deliveryCreateDeliveryRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for creating a delivery
     * Refer to summary
     * @param deliveryCreateDeliveryRequest The input body required by this request (required)
     * @return ApiResponse&lt;DeliveryCreateDeliveryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the delivery was created or not </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeliveryCreateDeliveryResponse> createDeliveryWithHttpInfo(DeliveryCreateDeliveryRequest deliveryCreateDeliveryRequest) throws ApiException {
        okhttp3.Call localVarCall = createDeliveryValidateBeforeCall(deliveryCreateDeliveryRequest, null);
        Type localVarReturnType = new TypeToken<DeliveryCreateDeliveryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for creating a delivery (asynchronously)
     * Refer to summary
     * @param deliveryCreateDeliveryRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the delivery was created or not </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeliveryAsync(DeliveryCreateDeliveryRequest deliveryCreateDeliveryRequest, final ApiCallback<DeliveryCreateDeliveryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDeliveryValidateBeforeCall(deliveryCreateDeliveryRequest, _callback);
        Type localVarReturnType = new TypeToken<DeliveryCreateDeliveryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeliveryDetail
     * @param deliveryGetDeliveryDetailRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the delivery detail </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeliveryDetailCall(DeliveryGetDeliveryDetailRequest deliveryGetDeliveryDetailRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deliveryGetDeliveryDetailRequest;

        // create path and map variables
        String localVarPath = "/delivery/getDeliveryDetail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeliveryDetailValidateBeforeCall(DeliveryGetDeliveryDetailRequest deliveryGetDeliveryDetailRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deliveryGetDeliveryDetailRequest' is set
        if (deliveryGetDeliveryDetailRequest == null) {
            throw new ApiException("Missing the required parameter 'deliveryGetDeliveryDetailRequest' when calling getDeliveryDetail(Async)");
        }
        

        okhttp3.Call localVarCall = getDeliveryDetailCall(deliveryGetDeliveryDetailRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for getting the detail of a delivery
     * Refer to summary
     * @param deliveryGetDeliveryDetailRequest The input body required by this request (required)
     * @return DeliveryGetDeliveryDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the delivery detail </td><td>  -  </td></tr>
     </table>
     */
    public DeliveryGetDeliveryDetailResponse getDeliveryDetail(DeliveryGetDeliveryDetailRequest deliveryGetDeliveryDetailRequest) throws ApiException {
        ApiResponse<DeliveryGetDeliveryDetailResponse> localVarResp = getDeliveryDetailWithHttpInfo(deliveryGetDeliveryDetailRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for getting the detail of a delivery
     * Refer to summary
     * @param deliveryGetDeliveryDetailRequest The input body required by this request (required)
     * @return ApiResponse&lt;DeliveryGetDeliveryDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the delivery detail </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeliveryGetDeliveryDetailResponse> getDeliveryDetailWithHttpInfo(DeliveryGetDeliveryDetailRequest deliveryGetDeliveryDetailRequest) throws ApiException {
        okhttp3.Call localVarCall = getDeliveryDetailValidateBeforeCall(deliveryGetDeliveryDetailRequest, null);
        Type localVarReturnType = new TypeToken<DeliveryGetDeliveryDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for getting the detail of a delivery (asynchronously)
     * Refer to summary
     * @param deliveryGetDeliveryDetailRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the delivery detail </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeliveryDetailAsync(DeliveryGetDeliveryDetailRequest deliveryGetDeliveryDetailRequest, final ApiCallback<DeliveryGetDeliveryDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeliveryDetailValidateBeforeCall(deliveryGetDeliveryDetailRequest, _callback);
        Type localVarReturnType = new TypeToken<DeliveryGetDeliveryDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeliveryStatus
     * @param deliveryGetDeliveryStatusRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the delivery status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeliveryStatusCall(DeliveryGetDeliveryStatusRequest deliveryGetDeliveryStatusRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deliveryGetDeliveryStatusRequest;

        // create path and map variables
        String localVarPath = "/delivery/getDeliveryStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeliveryStatusValidateBeforeCall(DeliveryGetDeliveryStatusRequest deliveryGetDeliveryStatusRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deliveryGetDeliveryStatusRequest' is set
        if (deliveryGetDeliveryStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'deliveryGetDeliveryStatusRequest' when calling getDeliveryStatus(Async)");
        }
        

        okhttp3.Call localVarCall = getDeliveryStatusCall(deliveryGetDeliveryStatusRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for getting the status of a delivery
     * Refer to summary
     * @param deliveryGetDeliveryStatusRequest The input body required by this request (required)
     * @return DeliveryGetDeliveryStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the delivery status </td><td>  -  </td></tr>
     </table>
     */
    public DeliveryGetDeliveryStatusResponse getDeliveryStatus(DeliveryGetDeliveryStatusRequest deliveryGetDeliveryStatusRequest) throws ApiException {
        ApiResponse<DeliveryGetDeliveryStatusResponse> localVarResp = getDeliveryStatusWithHttpInfo(deliveryGetDeliveryStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for getting the status of a delivery
     * Refer to summary
     * @param deliveryGetDeliveryStatusRequest The input body required by this request (required)
     * @return ApiResponse&lt;DeliveryGetDeliveryStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the delivery status </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeliveryGetDeliveryStatusResponse> getDeliveryStatusWithHttpInfo(DeliveryGetDeliveryStatusRequest deliveryGetDeliveryStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = getDeliveryStatusValidateBeforeCall(deliveryGetDeliveryStatusRequest, null);
        Type localVarReturnType = new TypeToken<DeliveryGetDeliveryStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for getting the status of a delivery (asynchronously)
     * Refer to summary
     * @param deliveryGetDeliveryStatusRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the delivery status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeliveryStatusAsync(DeliveryGetDeliveryStatusRequest deliveryGetDeliveryStatusRequest, final ApiCallback<DeliveryGetDeliveryStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeliveryStatusValidateBeforeCall(deliveryGetDeliveryStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<DeliveryGetDeliveryStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNextOrderForDriver
     * @param deliveryGetNextOrderForDriverRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the next order for a driver </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNextOrderForDriverCall(DeliveryGetNextOrderForDriverRequest deliveryGetNextOrderForDriverRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deliveryGetNextOrderForDriverRequest;

        // create path and map variables
        String localVarPath = "/delivery/getNextOrderForDriver";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNextOrderForDriverValidateBeforeCall(DeliveryGetNextOrderForDriverRequest deliveryGetNextOrderForDriverRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deliveryGetNextOrderForDriverRequest' is set
        if (deliveryGetNextOrderForDriverRequest == null) {
            throw new ApiException("Missing the required parameter 'deliveryGetNextOrderForDriverRequest' when calling getNextOrderForDriver(Async)");
        }
        

        okhttp3.Call localVarCall = getNextOrderForDriverCall(deliveryGetNextOrderForDriverRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for getting the next order for a driver
     * Refer to summary
     * @param deliveryGetNextOrderForDriverRequest The input body required by this request (required)
     * @return DeliveryGetNextOrderForDriverResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the next order for a driver </td><td>  -  </td></tr>
     </table>
     */
    public DeliveryGetNextOrderForDriverResponse getNextOrderForDriver(DeliveryGetNextOrderForDriverRequest deliveryGetNextOrderForDriverRequest) throws ApiException {
        ApiResponse<DeliveryGetNextOrderForDriverResponse> localVarResp = getNextOrderForDriverWithHttpInfo(deliveryGetNextOrderForDriverRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for getting the next order for a driver
     * Refer to summary
     * @param deliveryGetNextOrderForDriverRequest The input body required by this request (required)
     * @return ApiResponse&lt;DeliveryGetNextOrderForDriverResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the next order for a driver </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeliveryGetNextOrderForDriverResponse> getNextOrderForDriverWithHttpInfo(DeliveryGetNextOrderForDriverRequest deliveryGetNextOrderForDriverRequest) throws ApiException {
        okhttp3.Call localVarCall = getNextOrderForDriverValidateBeforeCall(deliveryGetNextOrderForDriverRequest, null);
        Type localVarReturnType = new TypeToken<DeliveryGetNextOrderForDriverResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for getting the next order for a driver (asynchronously)
     * Refer to summary
     * @param deliveryGetNextOrderForDriverRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the next order for a driver </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNextOrderForDriverAsync(DeliveryGetNextOrderForDriverRequest deliveryGetNextOrderForDriverRequest, final ApiCallback<DeliveryGetNextOrderForDriverResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNextOrderForDriverValidateBeforeCall(deliveryGetNextOrderForDriverRequest, _callback);
        Type localVarReturnType = new TypeToken<DeliveryGetNextOrderForDriverResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeDriverFromDelivery
     * @param deliveryRemoveDriverFromDeliveryRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the driver was removed from the order </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeDriverFromDeliveryCall(DeliveryRemoveDriverFromDeliveryRequest deliveryRemoveDriverFromDeliveryRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deliveryRemoveDriverFromDeliveryRequest;

        // create path and map variables
        String localVarPath = "/delivery/removeDriverFromDelivery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeDriverFromDeliveryValidateBeforeCall(DeliveryRemoveDriverFromDeliveryRequest deliveryRemoveDriverFromDeliveryRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deliveryRemoveDriverFromDeliveryRequest' is set
        if (deliveryRemoveDriverFromDeliveryRequest == null) {
            throw new ApiException("Missing the required parameter 'deliveryRemoveDriverFromDeliveryRequest' when calling removeDriverFromDelivery(Async)");
        }
        

        okhttp3.Call localVarCall = removeDriverFromDeliveryCall(deliveryRemoveDriverFromDeliveryRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for removing a driver from a delivery
     * Refer to summary
     * @param deliveryRemoveDriverFromDeliveryRequest The input body required by this request (required)
     * @return DeliveryRemoveDriverFromDeliveryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the driver was removed from the order </td><td>  -  </td></tr>
     </table>
     */
    public DeliveryRemoveDriverFromDeliveryResponse removeDriverFromDelivery(DeliveryRemoveDriverFromDeliveryRequest deliveryRemoveDriverFromDeliveryRequest) throws ApiException {
        ApiResponse<DeliveryRemoveDriverFromDeliveryResponse> localVarResp = removeDriverFromDeliveryWithHttpInfo(deliveryRemoveDriverFromDeliveryRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for removing a driver from a delivery
     * Refer to summary
     * @param deliveryRemoveDriverFromDeliveryRequest The input body required by this request (required)
     * @return ApiResponse&lt;DeliveryRemoveDriverFromDeliveryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the driver was removed from the order </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeliveryRemoveDriverFromDeliveryResponse> removeDriverFromDeliveryWithHttpInfo(DeliveryRemoveDriverFromDeliveryRequest deliveryRemoveDriverFromDeliveryRequest) throws ApiException {
        okhttp3.Call localVarCall = removeDriverFromDeliveryValidateBeforeCall(deliveryRemoveDriverFromDeliveryRequest, null);
        Type localVarReturnType = new TypeToken<DeliveryRemoveDriverFromDeliveryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for removing a driver from a delivery (asynchronously)
     * Refer to summary
     * @param deliveryRemoveDriverFromDeliveryRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the driver was removed from the order </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeDriverFromDeliveryAsync(DeliveryRemoveDriverFromDeliveryRequest deliveryRemoveDriverFromDeliveryRequest, final ApiCallback<DeliveryRemoveDriverFromDeliveryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeDriverFromDeliveryValidateBeforeCall(deliveryRemoveDriverFromDeliveryRequest, _callback);
        Type localVarReturnType = new TypeToken<DeliveryRemoveDriverFromDeliveryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trackDelivery
     * @param deliveryTrackDeliveryRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the location of the delivery </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trackDeliveryCall(DeliveryTrackDeliveryRequest deliveryTrackDeliveryRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deliveryTrackDeliveryRequest;

        // create path and map variables
        String localVarPath = "/delivery/trackDelivery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trackDeliveryValidateBeforeCall(DeliveryTrackDeliveryRequest deliveryTrackDeliveryRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deliveryTrackDeliveryRequest' is set
        if (deliveryTrackDeliveryRequest == null) {
            throw new ApiException("Missing the required parameter 'deliveryTrackDeliveryRequest' when calling trackDelivery(Async)");
        }
        

        okhttp3.Call localVarCall = trackDeliveryCall(deliveryTrackDeliveryRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for tracking a delivery
     * Refer to summary
     * @param deliveryTrackDeliveryRequest The input body required by this request (required)
     * @return DeliveryTrackDeliveryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the location of the delivery </td><td>  -  </td></tr>
     </table>
     */
    public DeliveryTrackDeliveryResponse trackDelivery(DeliveryTrackDeliveryRequest deliveryTrackDeliveryRequest) throws ApiException {
        ApiResponse<DeliveryTrackDeliveryResponse> localVarResp = trackDeliveryWithHttpInfo(deliveryTrackDeliveryRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for tracking a delivery
     * Refer to summary
     * @param deliveryTrackDeliveryRequest The input body required by this request (required)
     * @return ApiResponse&lt;DeliveryTrackDeliveryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the location of the delivery </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeliveryTrackDeliveryResponse> trackDeliveryWithHttpInfo(DeliveryTrackDeliveryRequest deliveryTrackDeliveryRequest) throws ApiException {
        okhttp3.Call localVarCall = trackDeliveryValidateBeforeCall(deliveryTrackDeliveryRequest, null);
        Type localVarReturnType = new TypeToken<DeliveryTrackDeliveryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for tracking a delivery (asynchronously)
     * Refer to summary
     * @param deliveryTrackDeliveryRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the location of the delivery </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trackDeliveryAsync(DeliveryTrackDeliveryRequest deliveryTrackDeliveryRequest, final ApiCallback<DeliveryTrackDeliveryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = trackDeliveryValidateBeforeCall(deliveryTrackDeliveryRequest, _callback);
        Type localVarReturnType = new TypeToken<DeliveryTrackDeliveryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeliveryStatus
     * @param deliveryUpdateDeliveryStatusRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the status of the delivery was updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeliveryStatusCall(DeliveryUpdateDeliveryStatusRequest deliveryUpdateDeliveryStatusRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deliveryUpdateDeliveryStatusRequest;

        // create path and map variables
        String localVarPath = "/delivery/updateDeliveryStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeliveryStatusValidateBeforeCall(DeliveryUpdateDeliveryStatusRequest deliveryUpdateDeliveryStatusRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deliveryUpdateDeliveryStatusRequest' is set
        if (deliveryUpdateDeliveryStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'deliveryUpdateDeliveryStatusRequest' when calling updateDeliveryStatus(Async)");
        }
        

        okhttp3.Call localVarCall = updateDeliveryStatusCall(deliveryUpdateDeliveryStatusRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for updating the status of a delivery
     * Refer to summary
     * @param deliveryUpdateDeliveryStatusRequest The input body required by this request (required)
     * @return DeliveryUpdateDeliveryStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the status of the delivery was updated </td><td>  -  </td></tr>
     </table>
     */
    public DeliveryUpdateDeliveryStatusResponse updateDeliveryStatus(DeliveryUpdateDeliveryStatusRequest deliveryUpdateDeliveryStatusRequest) throws ApiException {
        ApiResponse<DeliveryUpdateDeliveryStatusResponse> localVarResp = updateDeliveryStatusWithHttpInfo(deliveryUpdateDeliveryStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for updating the status of a delivery
     * Refer to summary
     * @param deliveryUpdateDeliveryStatusRequest The input body required by this request (required)
     * @return ApiResponse&lt;DeliveryUpdateDeliveryStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the status of the delivery was updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeliveryUpdateDeliveryStatusResponse> updateDeliveryStatusWithHttpInfo(DeliveryUpdateDeliveryStatusRequest deliveryUpdateDeliveryStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeliveryStatusValidateBeforeCall(deliveryUpdateDeliveryStatusRequest, null);
        Type localVarReturnType = new TypeToken<DeliveryUpdateDeliveryStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for updating the status of a delivery (asynchronously)
     * Refer to summary
     * @param deliveryUpdateDeliveryStatusRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the status of the delivery was updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeliveryStatusAsync(DeliveryUpdateDeliveryStatusRequest deliveryUpdateDeliveryStatusRequest, final ApiCallback<DeliveryUpdateDeliveryStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeliveryStatusValidateBeforeCall(deliveryUpdateDeliveryStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<DeliveryUpdateDeliveryStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
