/*
 * Library Service
 * The library service
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeliveryGetDeliveryDriverByOrderIdRequest;
import org.openapitools.client.model.DeliveryGetDeliveryDriverByOrderIdResponse;
import org.openapitools.client.model.ShoppingGetNextQueuedRequest;
import org.openapitools.client.model.ShoppingGetNextQueuedResponse;
import org.openapitools.client.model.UserAccountVerifyRequest;
import org.openapitools.client.model.UserAccountVerifyResponse;
import org.openapitools.client.model.UserClearShoppingCartRequest;
import org.openapitools.client.model.UserClearShoppingCartResponse;
import org.openapitools.client.model.UserCompleteDeliveryRequest;
import org.openapitools.client.model.UserCompleteDeliveryResponse;
import org.openapitools.client.model.UserCompletePackagingOrderRequest;
import org.openapitools.client.model.UserCompletePackagingOrderResponse;
import org.openapitools.client.model.UserDriverSetRatingRequest;
import org.openapitools.client.model.UserDriverSetRatingResponse;
import org.openapitools.client.model.UserGetCurrentUserRequest;
import org.openapitools.client.model.UserGetCurrentUserResponse;
import org.openapitools.client.model.UserGetCustomerByUUIDRequest;
import org.openapitools.client.model.UserGetCustomerByUUIDResponse;
import org.openapitools.client.model.UserGetGroceryListRequest;
import org.openapitools.client.model.UserGetGroceryListResponse;
import org.openapitools.client.model.UserGetShoppingCartRequest;
import org.openapitools.client.model.UserGetShoppingCartResponse;
import org.openapitools.client.model.UserLoginRequest;
import org.openapitools.client.model.UserLoginResponse;
import org.openapitools.client.model.UserMakeGroceryListRequest;
import org.openapitools.client.model.UserMakeGroceryListResponse;
import org.openapitools.client.model.UserRegisterAdminRequest;
import org.openapitools.client.model.UserRegisterAdminResponse;
import org.openapitools.client.model.UserRegisterCustomerRequest;
import org.openapitools.client.model.UserRegisterCustomerResponse;
import org.openapitools.client.model.UserRegisterDriverRequest;
import org.openapitools.client.model.UserRegisterDriverResponse;
import org.openapitools.client.model.UserRegisterShopperRequest;
import org.openapitools.client.model.UserRegisterShopperResponse;
import org.openapitools.client.model.UserResetPasswordRequest;
import org.openapitools.client.model.UserResetPasswordResponse;
import org.openapitools.client.model.UserScanItemRequest;
import org.openapitools.client.model.UserScanItemResponse;
import org.openapitools.client.model.UserSetCartRequest;
import org.openapitools.client.model.UserSetCartResponse;
import org.openapitools.client.model.UserSetCurrentLocationRequest;
import org.openapitools.client.model.UserSetCurrentLocationResponse;
import org.openapitools.client.model.UserUpdateDriverShiftRequest;
import org.openapitools.client.model.UserUpdateDriverShiftResponse;
import org.openapitools.client.model.UserUpdateShopperDetailsRequest;
import org.openapitools.client.model.UserUpdateShopperDetailsResponse;
import org.openapitools.client.model.UserUpdateShopperShiftRequest;
import org.openapitools.client.model.UserUpdateShopperShiftResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for clearShoppingCart
     * @param userClearShoppingCartRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearShoppingCartCall(UserClearShoppingCartRequest userClearShoppingCartRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userClearShoppingCartRequest;

        // create path and map variables
        String localVarPath = "/user/clearShoppingCart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearShoppingCartValidateBeforeCall(UserClearShoppingCartRequest userClearShoppingCartRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userClearShoppingCartRequest' is set
        if (userClearShoppingCartRequest == null) {
            throw new ApiException("Missing the required parameter 'userClearShoppingCartRequest' when calling clearShoppingCart(Async)");
        }
        

        okhttp3.Call localVarCall = clearShoppingCartCall(userClearShoppingCartRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for clearing a shopping cart
     * Refer to summary
     * @param userClearShoppingCartRequest The input body required by this request (required)
     * @return UserClearShoppingCartResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public UserClearShoppingCartResponse clearShoppingCart(UserClearShoppingCartRequest userClearShoppingCartRequest) throws ApiException {
        ApiResponse<UserClearShoppingCartResponse> localVarResp = clearShoppingCartWithHttpInfo(userClearShoppingCartRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for clearing a shopping cart
     * Refer to summary
     * @param userClearShoppingCartRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserClearShoppingCartResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserClearShoppingCartResponse> clearShoppingCartWithHttpInfo(UserClearShoppingCartRequest userClearShoppingCartRequest) throws ApiException {
        okhttp3.Call localVarCall = clearShoppingCartValidateBeforeCall(userClearShoppingCartRequest, null);
        Type localVarReturnType = new TypeToken<UserClearShoppingCartResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for clearing a shopping cart (asynchronously)
     * Refer to summary
     * @param userClearShoppingCartRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearShoppingCartAsync(UserClearShoppingCartRequest userClearShoppingCartRequest, final ApiCallback<UserClearShoppingCartResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearShoppingCartValidateBeforeCall(userClearShoppingCartRequest, _callback);
        Type localVarReturnType = new TypeToken<UserClearShoppingCartResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for completeDelivery
     * @param userCompleteDeliveryRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns delivery is completed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeDeliveryCall(UserCompleteDeliveryRequest userCompleteDeliveryRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userCompleteDeliveryRequest;

        // create path and map variables
        String localVarPath = "/user/completeDelivery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeDeliveryValidateBeforeCall(UserCompleteDeliveryRequest userCompleteDeliveryRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userCompleteDeliveryRequest' is set
        if (userCompleteDeliveryRequest == null) {
            throw new ApiException("Missing the required parameter 'userCompleteDeliveryRequest' when calling completeDelivery(Async)");
        }
        

        okhttp3.Call localVarCall = completeDeliveryCall(userCompleteDeliveryRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for complete delivery use case
     * Refer to summary
     * @param userCompleteDeliveryRequest The input body required by this request (required)
     * @return UserCompleteDeliveryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns delivery is completed </td><td>  -  </td></tr>
     </table>
     */
    public UserCompleteDeliveryResponse completeDelivery(UserCompleteDeliveryRequest userCompleteDeliveryRequest) throws ApiException {
        ApiResponse<UserCompleteDeliveryResponse> localVarResp = completeDeliveryWithHttpInfo(userCompleteDeliveryRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for complete delivery use case
     * Refer to summary
     * @param userCompleteDeliveryRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserCompleteDeliveryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns delivery is completed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserCompleteDeliveryResponse> completeDeliveryWithHttpInfo(UserCompleteDeliveryRequest userCompleteDeliveryRequest) throws ApiException {
        okhttp3.Call localVarCall = completeDeliveryValidateBeforeCall(userCompleteDeliveryRequest, null);
        Type localVarReturnType = new TypeToken<UserCompleteDeliveryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for complete delivery use case (asynchronously)
     * Refer to summary
     * @param userCompleteDeliveryRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns delivery is completed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeDeliveryAsync(UserCompleteDeliveryRequest userCompleteDeliveryRequest, final ApiCallback<UserCompleteDeliveryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeDeliveryValidateBeforeCall(userCompleteDeliveryRequest, _callback);
        Type localVarReturnType = new TypeToken<UserCompleteDeliveryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for completePackagingOrder
     * @param userCompletePackagingOrderRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the email was sent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completePackagingOrderCall(UserCompletePackagingOrderRequest userCompletePackagingOrderRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userCompletePackagingOrderRequest;

        // create path and map variables
        String localVarPath = "/user/completePackagingOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completePackagingOrderValidateBeforeCall(UserCompletePackagingOrderRequest userCompletePackagingOrderRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userCompletePackagingOrderRequest' is set
        if (userCompletePackagingOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'userCompletePackagingOrderRequest' when calling completePackagingOrder(Async)");
        }
        

        okhttp3.Call localVarCall = completePackagingOrderCall(userCompletePackagingOrderRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for complete packaging order use case
     * Refer to summary
     * @param userCompletePackagingOrderRequest The input body required by this request (required)
     * @return UserCompletePackagingOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the email was sent </td><td>  -  </td></tr>
     </table>
     */
    public UserCompletePackagingOrderResponse completePackagingOrder(UserCompletePackagingOrderRequest userCompletePackagingOrderRequest) throws ApiException {
        ApiResponse<UserCompletePackagingOrderResponse> localVarResp = completePackagingOrderWithHttpInfo(userCompletePackagingOrderRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for complete packaging order use case
     * Refer to summary
     * @param userCompletePackagingOrderRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserCompletePackagingOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the email was sent </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserCompletePackagingOrderResponse> completePackagingOrderWithHttpInfo(UserCompletePackagingOrderRequest userCompletePackagingOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = completePackagingOrderValidateBeforeCall(userCompletePackagingOrderRequest, null);
        Type localVarReturnType = new TypeToken<UserCompletePackagingOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for complete packaging order use case (asynchronously)
     * Refer to summary
     * @param userCompletePackagingOrderRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the email was sent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completePackagingOrderAsync(UserCompletePackagingOrderRequest userCompletePackagingOrderRequest, final ApiCallback<UserCompletePackagingOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = completePackagingOrderValidateBeforeCall(userCompletePackagingOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<UserCompletePackagingOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for driverSetRating
     * @param userDriverSetRatingRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driverSetRatingCall(UserDriverSetRatingRequest userDriverSetRatingRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userDriverSetRatingRequest;

        // create path and map variables
        String localVarPath = "/user/driverSetRating";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driverSetRatingValidateBeforeCall(UserDriverSetRatingRequest userDriverSetRatingRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userDriverSetRatingRequest' is set
        if (userDriverSetRatingRequest == null) {
            throw new ApiException("Missing the required parameter 'userDriverSetRatingRequest' when calling driverSetRating(Async)");
        }
        

        okhttp3.Call localVarCall = driverSetRatingCall(userDriverSetRatingRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for setting rating use case
     * Refer to summary
     * @param userDriverSetRatingRequest The input body required by this request (required)
     * @return UserDriverSetRatingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns response </td><td>  -  </td></tr>
     </table>
     */
    public UserDriverSetRatingResponse driverSetRating(UserDriverSetRatingRequest userDriverSetRatingRequest) throws ApiException {
        ApiResponse<UserDriverSetRatingResponse> localVarResp = driverSetRatingWithHttpInfo(userDriverSetRatingRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for setting rating use case
     * Refer to summary
     * @param userDriverSetRatingRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserDriverSetRatingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDriverSetRatingResponse> driverSetRatingWithHttpInfo(UserDriverSetRatingRequest userDriverSetRatingRequest) throws ApiException {
        okhttp3.Call localVarCall = driverSetRatingValidateBeforeCall(userDriverSetRatingRequest, null);
        Type localVarReturnType = new TypeToken<UserDriverSetRatingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for setting rating use case (asynchronously)
     * Refer to summary
     * @param userDriverSetRatingRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driverSetRatingAsync(UserDriverSetRatingRequest userDriverSetRatingRequest, final ApiCallback<UserDriverSetRatingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = driverSetRatingValidateBeforeCall(userDriverSetRatingRequest, _callback);
        Type localVarReturnType = new TypeToken<UserDriverSetRatingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCurrentUser
     * @param userGetCurrentUserRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrentUserCall(UserGetCurrentUserRequest userGetCurrentUserRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userGetCurrentUserRequest;

        // create path and map variables
        String localVarPath = "/user/getCurrentUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentUserValidateBeforeCall(UserGetCurrentUserRequest userGetCurrentUserRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userGetCurrentUserRequest' is set
        if (userGetCurrentUserRequest == null) {
            throw new ApiException("Missing the required parameter 'userGetCurrentUserRequest' when calling getCurrentUser(Async)");
        }
        

        okhttp3.Call localVarCall = getCurrentUserCall(userGetCurrentUserRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for to get Current user
     * Refer to summary
     * @param userGetCurrentUserRequest The input body required by this request (required)
     * @return UserGetCurrentUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public UserGetCurrentUserResponse getCurrentUser(UserGetCurrentUserRequest userGetCurrentUserRequest) throws ApiException {
        ApiResponse<UserGetCurrentUserResponse> localVarResp = getCurrentUserWithHttpInfo(userGetCurrentUserRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for to get Current user
     * Refer to summary
     * @param userGetCurrentUserRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserGetCurrentUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGetCurrentUserResponse> getCurrentUserWithHttpInfo(UserGetCurrentUserRequest userGetCurrentUserRequest) throws ApiException {
        okhttp3.Call localVarCall = getCurrentUserValidateBeforeCall(userGetCurrentUserRequest, null);
        Type localVarReturnType = new TypeToken<UserGetCurrentUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for to get Current user (asynchronously)
     * Refer to summary
     * @param userGetCurrentUserRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrentUserAsync(UserGetCurrentUserRequest userGetCurrentUserRequest, final ApiCallback<UserGetCurrentUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentUserValidateBeforeCall(userGetCurrentUserRequest, _callback);
        Type localVarReturnType = new TypeToken<UserGetCurrentUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerByUUID
     * @param userGetCustomerByUUIDRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns customer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerByUUIDCall(UserGetCustomerByUUIDRequest userGetCustomerByUUIDRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userGetCustomerByUUIDRequest;

        // create path and map variables
        String localVarPath = "/user/getCustomerByUUID";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerByUUIDValidateBeforeCall(UserGetCustomerByUUIDRequest userGetCustomerByUUIDRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userGetCustomerByUUIDRequest' is set
        if (userGetCustomerByUUIDRequest == null) {
            throw new ApiException("Missing the required parameter 'userGetCustomerByUUIDRequest' when calling getCustomerByUUID(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerByUUIDCall(userGetCustomerByUUIDRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for get customer by UUID use case
     * Refer to summary
     * @param userGetCustomerByUUIDRequest The input body required by this request (required)
     * @return UserGetCustomerByUUIDResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns customer </td><td>  -  </td></tr>
     </table>
     */
    public UserGetCustomerByUUIDResponse getCustomerByUUID(UserGetCustomerByUUIDRequest userGetCustomerByUUIDRequest) throws ApiException {
        ApiResponse<UserGetCustomerByUUIDResponse> localVarResp = getCustomerByUUIDWithHttpInfo(userGetCustomerByUUIDRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for get customer by UUID use case
     * Refer to summary
     * @param userGetCustomerByUUIDRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserGetCustomerByUUIDResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns customer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGetCustomerByUUIDResponse> getCustomerByUUIDWithHttpInfo(UserGetCustomerByUUIDRequest userGetCustomerByUUIDRequest) throws ApiException {
        okhttp3.Call localVarCall = getCustomerByUUIDValidateBeforeCall(userGetCustomerByUUIDRequest, null);
        Type localVarReturnType = new TypeToken<UserGetCustomerByUUIDResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for get customer by UUID use case (asynchronously)
     * Refer to summary
     * @param userGetCustomerByUUIDRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns customer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerByUUIDAsync(UserGetCustomerByUUIDRequest userGetCustomerByUUIDRequest, final ApiCallback<UserGetCustomerByUUIDResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerByUUIDValidateBeforeCall(userGetCustomerByUUIDRequest, _callback);
        Type localVarReturnType = new TypeToken<UserGetCustomerByUUIDResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeliveryDriverByOrderId
     * @param deliveryGetDeliveryDriverByOrderIdRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns delivery and driver </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeliveryDriverByOrderIdCall(DeliveryGetDeliveryDriverByOrderIdRequest deliveryGetDeliveryDriverByOrderIdRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deliveryGetDeliveryDriverByOrderIdRequest;

        // create path and map variables
        String localVarPath = "/delivery/getDeliveryDriverByOrderId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeliveryDriverByOrderIdValidateBeforeCall(DeliveryGetDeliveryDriverByOrderIdRequest deliveryGetDeliveryDriverByOrderIdRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deliveryGetDeliveryDriverByOrderIdRequest' is set
        if (deliveryGetDeliveryDriverByOrderIdRequest == null) {
            throw new ApiException("Missing the required parameter 'deliveryGetDeliveryDriverByOrderIdRequest' when calling getDeliveryDriverByOrderId(Async)");
        }
        

        okhttp3.Call localVarCall = getDeliveryDriverByOrderIdCall(deliveryGetDeliveryDriverByOrderIdRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for get delivery driver by order id use case
     * Refer to summary
     * @param deliveryGetDeliveryDriverByOrderIdRequest The input body required by this request (required)
     * @return DeliveryGetDeliveryDriverByOrderIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns delivery and driver </td><td>  -  </td></tr>
     </table>
     */
    public DeliveryGetDeliveryDriverByOrderIdResponse getDeliveryDriverByOrderId(DeliveryGetDeliveryDriverByOrderIdRequest deliveryGetDeliveryDriverByOrderIdRequest) throws ApiException {
        ApiResponse<DeliveryGetDeliveryDriverByOrderIdResponse> localVarResp = getDeliveryDriverByOrderIdWithHttpInfo(deliveryGetDeliveryDriverByOrderIdRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for get delivery driver by order id use case
     * Refer to summary
     * @param deliveryGetDeliveryDriverByOrderIdRequest The input body required by this request (required)
     * @return ApiResponse&lt;DeliveryGetDeliveryDriverByOrderIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns delivery and driver </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeliveryGetDeliveryDriverByOrderIdResponse> getDeliveryDriverByOrderIdWithHttpInfo(DeliveryGetDeliveryDriverByOrderIdRequest deliveryGetDeliveryDriverByOrderIdRequest) throws ApiException {
        okhttp3.Call localVarCall = getDeliveryDriverByOrderIdValidateBeforeCall(deliveryGetDeliveryDriverByOrderIdRequest, null);
        Type localVarReturnType = new TypeToken<DeliveryGetDeliveryDriverByOrderIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for get delivery driver by order id use case (asynchronously)
     * Refer to summary
     * @param deliveryGetDeliveryDriverByOrderIdRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns delivery and driver </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeliveryDriverByOrderIdAsync(DeliveryGetDeliveryDriverByOrderIdRequest deliveryGetDeliveryDriverByOrderIdRequest, final ApiCallback<DeliveryGetDeliveryDriverByOrderIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeliveryDriverByOrderIdValidateBeforeCall(deliveryGetDeliveryDriverByOrderIdRequest, _callback);
        Type localVarReturnType = new TypeToken<DeliveryGetDeliveryDriverByOrderIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroceryLists
     * @param userGetGroceryListRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the groceryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroceryListsCall(UserGetGroceryListRequest userGetGroceryListRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userGetGroceryListRequest;

        // create path and map variables
        String localVarPath = "/user/getGroceryLists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroceryListsValidateBeforeCall(UserGetGroceryListRequest userGetGroceryListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userGetGroceryListRequest' is set
        if (userGetGroceryListRequest == null) {
            throw new ApiException("Missing the required parameter 'userGetGroceryListRequest' when calling getGroceryLists(Async)");
        }
        

        okhttp3.Call localVarCall = getGroceryListsCall(userGetGroceryListRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for get grocery lists use case
     * Refer to summary
     * @param userGetGroceryListRequest The input body required by this request (required)
     * @return UserGetGroceryListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the groceryList </td><td>  -  </td></tr>
     </table>
     */
    public UserGetGroceryListResponse getGroceryLists(UserGetGroceryListRequest userGetGroceryListRequest) throws ApiException {
        ApiResponse<UserGetGroceryListResponse> localVarResp = getGroceryListsWithHttpInfo(userGetGroceryListRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for get grocery lists use case
     * Refer to summary
     * @param userGetGroceryListRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserGetGroceryListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the groceryList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGetGroceryListResponse> getGroceryListsWithHttpInfo(UserGetGroceryListRequest userGetGroceryListRequest) throws ApiException {
        okhttp3.Call localVarCall = getGroceryListsValidateBeforeCall(userGetGroceryListRequest, null);
        Type localVarReturnType = new TypeToken<UserGetGroceryListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for get grocery lists use case (asynchronously)
     * Refer to summary
     * @param userGetGroceryListRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the groceryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroceryListsAsync(UserGetGroceryListRequest userGetGroceryListRequest, final ApiCallback<UserGetGroceryListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroceryListsValidateBeforeCall(userGetGroceryListRequest, _callback);
        Type localVarReturnType = new TypeToken<UserGetGroceryListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNextQueued
     * @param shoppingGetNextQueuedRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNextQueuedCall(ShoppingGetNextQueuedRequest shoppingGetNextQueuedRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shoppingGetNextQueuedRequest;

        // create path and map variables
        String localVarPath = "/shopping/getNextQueued";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNextQueuedValidateBeforeCall(ShoppingGetNextQueuedRequest shoppingGetNextQueuedRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shoppingGetNextQueuedRequest' is set
        if (shoppingGetNextQueuedRequest == null) {
            throw new ApiException("Missing the required parameter 'shoppingGetNextQueuedRequest' when calling getNextQueued(Async)");
        }
        

        okhttp3.Call localVarCall = getNextQueuedCall(shoppingGetNextQueuedRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for getting next queue
     * Refer to summary
     * @param shoppingGetNextQueuedRequest The input body required by this request (required)
     * @return ShoppingGetNextQueuedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ShoppingGetNextQueuedResponse getNextQueued(ShoppingGetNextQueuedRequest shoppingGetNextQueuedRequest) throws ApiException {
        ApiResponse<ShoppingGetNextQueuedResponse> localVarResp = getNextQueuedWithHttpInfo(shoppingGetNextQueuedRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for getting next queue
     * Refer to summary
     * @param shoppingGetNextQueuedRequest The input body required by this request (required)
     * @return ApiResponse&lt;ShoppingGetNextQueuedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShoppingGetNextQueuedResponse> getNextQueuedWithHttpInfo(ShoppingGetNextQueuedRequest shoppingGetNextQueuedRequest) throws ApiException {
        okhttp3.Call localVarCall = getNextQueuedValidateBeforeCall(shoppingGetNextQueuedRequest, null);
        Type localVarReturnType = new TypeToken<ShoppingGetNextQueuedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for getting next queue (asynchronously)
     * Refer to summary
     * @param shoppingGetNextQueuedRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNextQueuedAsync(ShoppingGetNextQueuedRequest shoppingGetNextQueuedRequest, final ApiCallback<ShoppingGetNextQueuedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNextQueuedValidateBeforeCall(shoppingGetNextQueuedRequest, _callback);
        Type localVarReturnType = new TypeToken<ShoppingGetNextQueuedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShoppingCart
     * @param userGetShoppingCartRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShoppingCartCall(UserGetShoppingCartRequest userGetShoppingCartRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userGetShoppingCartRequest;

        // create path and map variables
        String localVarPath = "/user/getShoppingCart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShoppingCartValidateBeforeCall(UserGetShoppingCartRequest userGetShoppingCartRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userGetShoppingCartRequest' is set
        if (userGetShoppingCartRequest == null) {
            throw new ApiException("Missing the required parameter 'userGetShoppingCartRequest' when calling getShoppingCart(Async)");
        }
        

        okhttp3.Call localVarCall = getShoppingCartCall(userGetShoppingCartRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for getting a shopping cart
     * Refer to summary
     * @param userGetShoppingCartRequest The input body required by this request (required)
     * @return UserGetShoppingCartResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public UserGetShoppingCartResponse getShoppingCart(UserGetShoppingCartRequest userGetShoppingCartRequest) throws ApiException {
        ApiResponse<UserGetShoppingCartResponse> localVarResp = getShoppingCartWithHttpInfo(userGetShoppingCartRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for getting a shopping cart
     * Refer to summary
     * @param userGetShoppingCartRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserGetShoppingCartResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGetShoppingCartResponse> getShoppingCartWithHttpInfo(UserGetShoppingCartRequest userGetShoppingCartRequest) throws ApiException {
        okhttp3.Call localVarCall = getShoppingCartValidateBeforeCall(userGetShoppingCartRequest, null);
        Type localVarReturnType = new TypeToken<UserGetShoppingCartResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for getting a shopping cart (asynchronously)
     * Refer to summary
     * @param userGetShoppingCartRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShoppingCartAsync(UserGetShoppingCartRequest userGetShoppingCartRequest, final ApiCallback<UserGetShoppingCartResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShoppingCartValidateBeforeCall(userGetShoppingCartRequest, _callback);
        Type localVarReturnType = new TypeToken<UserGetShoppingCartResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loginUser
     * @param userLoginRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginUserCall(UserLoginRequest userLoginRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userLoginRequest;

        // create path and map variables
        String localVarPath = "/user/loginUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginUserValidateBeforeCall(UserLoginRequest userLoginRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userLoginRequest' is set
        if (userLoginRequest == null) {
            throw new ApiException("Missing the required parameter 'userLoginRequest' when calling loginUser(Async)");
        }
        

        okhttp3.Call localVarCall = loginUserCall(userLoginRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for setting a shopping cart
     * Refer to summary
     * @param userLoginRequest The input body required by this request (required)
     * @return UserLoginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public UserLoginResponse loginUser(UserLoginRequest userLoginRequest) throws ApiException {
        ApiResponse<UserLoginResponse> localVarResp = loginUserWithHttpInfo(userLoginRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for setting a shopping cart
     * Refer to summary
     * @param userLoginRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserLoginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserLoginResponse> loginUserWithHttpInfo(UserLoginRequest userLoginRequest) throws ApiException {
        okhttp3.Call localVarCall = loginUserValidateBeforeCall(userLoginRequest, null);
        Type localVarReturnType = new TypeToken<UserLoginResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for setting a shopping cart (asynchronously)
     * Refer to summary
     * @param userLoginRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginUserAsync(UserLoginRequest userLoginRequest, final ApiCallback<UserLoginResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginUserValidateBeforeCall(userLoginRequest, _callback);
        Type localVarReturnType = new TypeToken<UserLoginResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for makeGroceryList
     * @param userMakeGroceryListRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call makeGroceryListCall(UserMakeGroceryListRequest userMakeGroceryListRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userMakeGroceryListRequest;

        // create path and map variables
        String localVarPath = "/user/makeGroceryList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call makeGroceryListValidateBeforeCall(UserMakeGroceryListRequest userMakeGroceryListRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userMakeGroceryListRequest' is set
        if (userMakeGroceryListRequest == null) {
            throw new ApiException("Missing the required parameter 'userMakeGroceryListRequest' when calling makeGroceryList(Async)");
        }
        

        okhttp3.Call localVarCall = makeGroceryListCall(userMakeGroceryListRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for making a grocery list
     * Refer to summary
     * @param userMakeGroceryListRequest The input body required by this request (required)
     * @return UserMakeGroceryListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public UserMakeGroceryListResponse makeGroceryList(UserMakeGroceryListRequest userMakeGroceryListRequest) throws ApiException {
        ApiResponse<UserMakeGroceryListResponse> localVarResp = makeGroceryListWithHttpInfo(userMakeGroceryListRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for making a grocery list
     * Refer to summary
     * @param userMakeGroceryListRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserMakeGroceryListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserMakeGroceryListResponse> makeGroceryListWithHttpInfo(UserMakeGroceryListRequest userMakeGroceryListRequest) throws ApiException {
        okhttp3.Call localVarCall = makeGroceryListValidateBeforeCall(userMakeGroceryListRequest, null);
        Type localVarReturnType = new TypeToken<UserMakeGroceryListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for making a grocery list (asynchronously)
     * Refer to summary
     * @param userMakeGroceryListRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call makeGroceryListAsync(UserMakeGroceryListRequest userMakeGroceryListRequest, final ApiCallback<UserMakeGroceryListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = makeGroceryListValidateBeforeCall(userMakeGroceryListRequest, _callback);
        Type localVarReturnType = new TypeToken<UserMakeGroceryListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerAdmin
     * @param userRegisterAdminRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerAdminCall(UserRegisterAdminRequest userRegisterAdminRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userRegisterAdminRequest;

        // create path and map variables
        String localVarPath = "/user/registerAdmin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerAdminValidateBeforeCall(UserRegisterAdminRequest userRegisterAdminRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userRegisterAdminRequest' is set
        if (userRegisterAdminRequest == null) {
            throw new ApiException("Missing the required parameter 'userRegisterAdminRequest' when calling registerAdmin(Async)");
        }
        

        okhttp3.Call localVarCall = registerAdminCall(userRegisterAdminRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for setting a registering admin
     * Refer to summary
     * @param userRegisterAdminRequest The input body required by this request (required)
     * @return UserRegisterAdminResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public UserRegisterAdminResponse registerAdmin(UserRegisterAdminRequest userRegisterAdminRequest) throws ApiException {
        ApiResponse<UserRegisterAdminResponse> localVarResp = registerAdminWithHttpInfo(userRegisterAdminRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for setting a registering admin
     * Refer to summary
     * @param userRegisterAdminRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserRegisterAdminResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserRegisterAdminResponse> registerAdminWithHttpInfo(UserRegisterAdminRequest userRegisterAdminRequest) throws ApiException {
        okhttp3.Call localVarCall = registerAdminValidateBeforeCall(userRegisterAdminRequest, null);
        Type localVarReturnType = new TypeToken<UserRegisterAdminResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for setting a registering admin (asynchronously)
     * Refer to summary
     * @param userRegisterAdminRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerAdminAsync(UserRegisterAdminRequest userRegisterAdminRequest, final ApiCallback<UserRegisterAdminResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerAdminValidateBeforeCall(userRegisterAdminRequest, _callback);
        Type localVarReturnType = new TypeToken<UserRegisterAdminResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerCustomer
     * @param userRegisterCustomerRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerCustomerCall(UserRegisterCustomerRequest userRegisterCustomerRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userRegisterCustomerRequest;

        // create path and map variables
        String localVarPath = "/user/registerCustomer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerCustomerValidateBeforeCall(UserRegisterCustomerRequest userRegisterCustomerRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userRegisterCustomerRequest' is set
        if (userRegisterCustomerRequest == null) {
            throw new ApiException("Missing the required parameter 'userRegisterCustomerRequest' when calling registerCustomer(Async)");
        }
        

        okhttp3.Call localVarCall = registerCustomerCall(userRegisterCustomerRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for setting a registering customer
     * Refer to summary
     * @param userRegisterCustomerRequest The input body required by this request (required)
     * @return UserRegisterCustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public UserRegisterCustomerResponse registerCustomer(UserRegisterCustomerRequest userRegisterCustomerRequest) throws ApiException {
        ApiResponse<UserRegisterCustomerResponse> localVarResp = registerCustomerWithHttpInfo(userRegisterCustomerRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for setting a registering customer
     * Refer to summary
     * @param userRegisterCustomerRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserRegisterCustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserRegisterCustomerResponse> registerCustomerWithHttpInfo(UserRegisterCustomerRequest userRegisterCustomerRequest) throws ApiException {
        okhttp3.Call localVarCall = registerCustomerValidateBeforeCall(userRegisterCustomerRequest, null);
        Type localVarReturnType = new TypeToken<UserRegisterCustomerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for setting a registering customer (asynchronously)
     * Refer to summary
     * @param userRegisterCustomerRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerCustomerAsync(UserRegisterCustomerRequest userRegisterCustomerRequest, final ApiCallback<UserRegisterCustomerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerCustomerValidateBeforeCall(userRegisterCustomerRequest, _callback);
        Type localVarReturnType = new TypeToken<UserRegisterCustomerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerDriver
     * @param userRegisterDriverRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerDriverCall(UserRegisterDriverRequest userRegisterDriverRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userRegisterDriverRequest;

        // create path and map variables
        String localVarPath = "/user/registerDriver";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerDriverValidateBeforeCall(UserRegisterDriverRequest userRegisterDriverRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userRegisterDriverRequest' is set
        if (userRegisterDriverRequest == null) {
            throw new ApiException("Missing the required parameter 'userRegisterDriverRequest' when calling registerDriver(Async)");
        }
        

        okhttp3.Call localVarCall = registerDriverCall(userRegisterDriverRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for setting a registering driver
     * Refer to summary
     * @param userRegisterDriverRequest The input body required by this request (required)
     * @return UserRegisterDriverResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public UserRegisterDriverResponse registerDriver(UserRegisterDriverRequest userRegisterDriverRequest) throws ApiException {
        ApiResponse<UserRegisterDriverResponse> localVarResp = registerDriverWithHttpInfo(userRegisterDriverRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for setting a registering driver
     * Refer to summary
     * @param userRegisterDriverRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserRegisterDriverResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserRegisterDriverResponse> registerDriverWithHttpInfo(UserRegisterDriverRequest userRegisterDriverRequest) throws ApiException {
        okhttp3.Call localVarCall = registerDriverValidateBeforeCall(userRegisterDriverRequest, null);
        Type localVarReturnType = new TypeToken<UserRegisterDriverResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for setting a registering driver (asynchronously)
     * Refer to summary
     * @param userRegisterDriverRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerDriverAsync(UserRegisterDriverRequest userRegisterDriverRequest, final ApiCallback<UserRegisterDriverResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerDriverValidateBeforeCall(userRegisterDriverRequest, _callback);
        Type localVarReturnType = new TypeToken<UserRegisterDriverResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerShopper
     * @param userRegisterShopperRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerShopperCall(UserRegisterShopperRequest userRegisterShopperRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userRegisterShopperRequest;

        // create path and map variables
        String localVarPath = "/user/registerShopper";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerShopperValidateBeforeCall(UserRegisterShopperRequest userRegisterShopperRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userRegisterShopperRequest' is set
        if (userRegisterShopperRequest == null) {
            throw new ApiException("Missing the required parameter 'userRegisterShopperRequest' when calling registerShopper(Async)");
        }
        

        okhttp3.Call localVarCall = registerShopperCall(userRegisterShopperRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for setting a registering shopper
     * Refer to summary
     * @param userRegisterShopperRequest The input body required by this request (required)
     * @return UserRegisterShopperResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public UserRegisterShopperResponse registerShopper(UserRegisterShopperRequest userRegisterShopperRequest) throws ApiException {
        ApiResponse<UserRegisterShopperResponse> localVarResp = registerShopperWithHttpInfo(userRegisterShopperRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for setting a registering shopper
     * Refer to summary
     * @param userRegisterShopperRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserRegisterShopperResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserRegisterShopperResponse> registerShopperWithHttpInfo(UserRegisterShopperRequest userRegisterShopperRequest) throws ApiException {
        okhttp3.Call localVarCall = registerShopperValidateBeforeCall(userRegisterShopperRequest, null);
        Type localVarReturnType = new TypeToken<UserRegisterShopperResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for setting a registering shopper (asynchronously)
     * Refer to summary
     * @param userRegisterShopperRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerShopperAsync(UserRegisterShopperRequest userRegisterShopperRequest, final ApiCallback<UserRegisterShopperResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerShopperValidateBeforeCall(userRegisterShopperRequest, _callback);
        Type localVarReturnType = new TypeToken<UserRegisterShopperResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetPassword
     * @param userResetPasswordRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetPasswordCall(UserResetPasswordRequest userResetPasswordRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userResetPasswordRequest;

        // create path and map variables
        String localVarPath = "/user/resetPassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetPasswordValidateBeforeCall(UserResetPasswordRequest userResetPasswordRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userResetPasswordRequest' is set
        if (userResetPasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'userResetPasswordRequest' when calling resetPassword(Async)");
        }
        

        okhttp3.Call localVarCall = resetPasswordCall(userResetPasswordRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for reseting password
     * Refer to summary
     * @param userResetPasswordRequest The input body required by this request (required)
     * @return UserResetPasswordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public UserResetPasswordResponse resetPassword(UserResetPasswordRequest userResetPasswordRequest) throws ApiException {
        ApiResponse<UserResetPasswordResponse> localVarResp = resetPasswordWithHttpInfo(userResetPasswordRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for reseting password
     * Refer to summary
     * @param userResetPasswordRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserResetPasswordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserResetPasswordResponse> resetPasswordWithHttpInfo(UserResetPasswordRequest userResetPasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = resetPasswordValidateBeforeCall(userResetPasswordRequest, null);
        Type localVarReturnType = new TypeToken<UserResetPasswordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for reseting password (asynchronously)
     * Refer to summary
     * @param userResetPasswordRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetPasswordAsync(UserResetPasswordRequest userResetPasswordRequest, final ApiCallback<UserResetPasswordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetPasswordValidateBeforeCall(userResetPasswordRequest, _callback);
        Type localVarReturnType = new TypeToken<UserResetPasswordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scanItem
     * @param userScanItemRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the email was sent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scanItemCall(UserScanItemRequest userScanItemRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userScanItemRequest;

        // create path and map variables
        String localVarPath = "/user/scanItem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scanItemValidateBeforeCall(UserScanItemRequest userScanItemRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userScanItemRequest' is set
        if (userScanItemRequest == null) {
            throw new ApiException("Missing the required parameter 'userScanItemRequest' when calling scanItem(Async)");
        }
        

        okhttp3.Call localVarCall = scanItemCall(userScanItemRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for scanning an item
     * Refer to summary
     * @param userScanItemRequest The input body required by this request (required)
     * @return UserScanItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the email was sent </td><td>  -  </td></tr>
     </table>
     */
    public UserScanItemResponse scanItem(UserScanItemRequest userScanItemRequest) throws ApiException {
        ApiResponse<UserScanItemResponse> localVarResp = scanItemWithHttpInfo(userScanItemRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for scanning an item
     * Refer to summary
     * @param userScanItemRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserScanItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the email was sent </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserScanItemResponse> scanItemWithHttpInfo(UserScanItemRequest userScanItemRequest) throws ApiException {
        okhttp3.Call localVarCall = scanItemValidateBeforeCall(userScanItemRequest, null);
        Type localVarReturnType = new TypeToken<UserScanItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for scanning an item (asynchronously)
     * Refer to summary
     * @param userScanItemRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the email was sent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scanItemAsync(UserScanItemRequest userScanItemRequest, final ApiCallback<UserScanItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = scanItemValidateBeforeCall(userScanItemRequest, _callback);
        Type localVarReturnType = new TypeToken<UserScanItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setCart
     * @param userSetCartRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setCartCall(UserSetCartRequest userSetCartRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userSetCartRequest;

        // create path and map variables
        String localVarPath = "/user/setCart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setCartValidateBeforeCall(UserSetCartRequest userSetCartRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userSetCartRequest' is set
        if (userSetCartRequest == null) {
            throw new ApiException("Missing the required parameter 'userSetCartRequest' when calling setCart(Async)");
        }
        

        okhttp3.Call localVarCall = setCartCall(userSetCartRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for setting a shopping cart
     * Refer to summary
     * @param userSetCartRequest The input body required by this request (required)
     * @return UserSetCartResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public UserSetCartResponse setCart(UserSetCartRequest userSetCartRequest) throws ApiException {
        ApiResponse<UserSetCartResponse> localVarResp = setCartWithHttpInfo(userSetCartRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for setting a shopping cart
     * Refer to summary
     * @param userSetCartRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserSetCartResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserSetCartResponse> setCartWithHttpInfo(UserSetCartRequest userSetCartRequest) throws ApiException {
        okhttp3.Call localVarCall = setCartValidateBeforeCall(userSetCartRequest, null);
        Type localVarReturnType = new TypeToken<UserSetCartResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for setting a shopping cart (asynchronously)
     * Refer to summary
     * @param userSetCartRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setCartAsync(UserSetCartRequest userSetCartRequest, final ApiCallback<UserSetCartResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setCartValidateBeforeCall(userSetCartRequest, _callback);
        Type localVarReturnType = new TypeToken<UserSetCartResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setCurrentLocation
     * @param userSetCurrentLocationRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setCurrentLocationCall(UserSetCurrentLocationRequest userSetCurrentLocationRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userSetCurrentLocationRequest;

        // create path and map variables
        String localVarPath = "/user/setCurrentLocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setCurrentLocationValidateBeforeCall(UserSetCurrentLocationRequest userSetCurrentLocationRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userSetCurrentLocationRequest' is set
        if (userSetCurrentLocationRequest == null) {
            throw new ApiException("Missing the required parameter 'userSetCurrentLocationRequest' when calling setCurrentLocation(Async)");
        }
        

        okhttp3.Call localVarCall = setCurrentLocationCall(userSetCurrentLocationRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for setting Current Location Driver
     * Refer to summary
     * @param userSetCurrentLocationRequest The input body required by this request (required)
     * @return UserSetCurrentLocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public UserSetCurrentLocationResponse setCurrentLocation(UserSetCurrentLocationRequest userSetCurrentLocationRequest) throws ApiException {
        ApiResponse<UserSetCurrentLocationResponse> localVarResp = setCurrentLocationWithHttpInfo(userSetCurrentLocationRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for setting Current Location Driver
     * Refer to summary
     * @param userSetCurrentLocationRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserSetCurrentLocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserSetCurrentLocationResponse> setCurrentLocationWithHttpInfo(UserSetCurrentLocationRequest userSetCurrentLocationRequest) throws ApiException {
        okhttp3.Call localVarCall = setCurrentLocationValidateBeforeCall(userSetCurrentLocationRequest, null);
        Type localVarReturnType = new TypeToken<UserSetCurrentLocationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for setting Current Location Driver (asynchronously)
     * Refer to summary
     * @param userSetCurrentLocationRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setCurrentLocationAsync(UserSetCurrentLocationRequest userSetCurrentLocationRequest, final ApiCallback<UserSetCurrentLocationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setCurrentLocationValidateBeforeCall(userSetCurrentLocationRequest, _callback);
        Type localVarReturnType = new TypeToken<UserSetCurrentLocationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDriverShift
     * @param userUpdateDriverShiftRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDriverShiftCall(UserUpdateDriverShiftRequest userUpdateDriverShiftRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userUpdateDriverShiftRequest;

        // create path and map variables
        String localVarPath = "/user/updateDriverShift";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDriverShiftValidateBeforeCall(UserUpdateDriverShiftRequest userUpdateDriverShiftRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userUpdateDriverShiftRequest' is set
        if (userUpdateDriverShiftRequest == null) {
            throw new ApiException("Missing the required parameter 'userUpdateDriverShiftRequest' when calling updateDriverShift(Async)");
        }
        

        okhttp3.Call localVarCall = updateDriverShiftCall(userUpdateDriverShiftRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for updating driver shift
     * Refer to summary
     * @param userUpdateDriverShiftRequest The input body required by this request (required)
     * @return UserUpdateDriverShiftResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public UserUpdateDriverShiftResponse updateDriverShift(UserUpdateDriverShiftRequest userUpdateDriverShiftRequest) throws ApiException {
        ApiResponse<UserUpdateDriverShiftResponse> localVarResp = updateDriverShiftWithHttpInfo(userUpdateDriverShiftRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for updating driver shift
     * Refer to summary
     * @param userUpdateDriverShiftRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserUpdateDriverShiftResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserUpdateDriverShiftResponse> updateDriverShiftWithHttpInfo(UserUpdateDriverShiftRequest userUpdateDriverShiftRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDriverShiftValidateBeforeCall(userUpdateDriverShiftRequest, null);
        Type localVarReturnType = new TypeToken<UserUpdateDriverShiftResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for updating driver shift (asynchronously)
     * Refer to summary
     * @param userUpdateDriverShiftRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDriverShiftAsync(UserUpdateDriverShiftRequest userUpdateDriverShiftRequest, final ApiCallback<UserUpdateDriverShiftResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDriverShiftValidateBeforeCall(userUpdateDriverShiftRequest, _callback);
        Type localVarReturnType = new TypeToken<UserUpdateDriverShiftResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateShopperDetails
     * @param userUpdateShopperDetailsRequest The input body require by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns if updating details was successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateShopperDetailsCall(UserUpdateShopperDetailsRequest userUpdateShopperDetailsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userUpdateShopperDetailsRequest;

        // create path and map variables
        String localVarPath = "/user/updateShopperDetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateShopperDetailsValidateBeforeCall(UserUpdateShopperDetailsRequest userUpdateShopperDetailsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userUpdateShopperDetailsRequest' is set
        if (userUpdateShopperDetailsRequest == null) {
            throw new ApiException("Missing the required parameter 'userUpdateShopperDetailsRequest' when calling updateShopperDetails(Async)");
        }
        

        okhttp3.Call localVarCall = updateShopperDetailsCall(userUpdateShopperDetailsRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for updating shopper details
     * Refer to summary
     * @param userUpdateShopperDetailsRequest The input body require by this request (required)
     * @return UserUpdateShopperDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns if updating details was successful </td><td>  -  </td></tr>
     </table>
     */
    public UserUpdateShopperDetailsResponse updateShopperDetails(UserUpdateShopperDetailsRequest userUpdateShopperDetailsRequest) throws ApiException {
        ApiResponse<UserUpdateShopperDetailsResponse> localVarResp = updateShopperDetailsWithHttpInfo(userUpdateShopperDetailsRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for updating shopper details
     * Refer to summary
     * @param userUpdateShopperDetailsRequest The input body require by this request (required)
     * @return ApiResponse&lt;UserUpdateShopperDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns if updating details was successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserUpdateShopperDetailsResponse> updateShopperDetailsWithHttpInfo(UserUpdateShopperDetailsRequest userUpdateShopperDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateShopperDetailsValidateBeforeCall(userUpdateShopperDetailsRequest, null);
        Type localVarReturnType = new TypeToken<UserUpdateShopperDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for updating shopper details (asynchronously)
     * Refer to summary
     * @param userUpdateShopperDetailsRequest The input body require by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns if updating details was successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateShopperDetailsAsync(UserUpdateShopperDetailsRequest userUpdateShopperDetailsRequest, final ApiCallback<UserUpdateShopperDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateShopperDetailsValidateBeforeCall(userUpdateShopperDetailsRequest, _callback);
        Type localVarReturnType = new TypeToken<UserUpdateShopperDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateShopperShift
     * @param userUpdateShopperShiftRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateShopperShiftCall(UserUpdateShopperShiftRequest userUpdateShopperShiftRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userUpdateShopperShiftRequest;

        // create path and map variables
        String localVarPath = "/user/updateShopperShift";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateShopperShiftValidateBeforeCall(UserUpdateShopperShiftRequest userUpdateShopperShiftRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userUpdateShopperShiftRequest' is set
        if (userUpdateShopperShiftRequest == null) {
            throw new ApiException("Missing the required parameter 'userUpdateShopperShiftRequest' when calling updateShopperShift(Async)");
        }
        

        okhttp3.Call localVarCall = updateShopperShiftCall(userUpdateShopperShiftRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for updating shopper shift
     * Refer to summary
     * @param userUpdateShopperShiftRequest The input body required by this request (required)
     * @return UserUpdateShopperShiftResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public UserUpdateShopperShiftResponse updateShopperShift(UserUpdateShopperShiftRequest userUpdateShopperShiftRequest) throws ApiException {
        ApiResponse<UserUpdateShopperShiftResponse> localVarResp = updateShopperShiftWithHttpInfo(userUpdateShopperShiftRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for updating shopper shift
     * Refer to summary
     * @param userUpdateShopperShiftRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserUpdateShopperShiftResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserUpdateShopperShiftResponse> updateShopperShiftWithHttpInfo(UserUpdateShopperShiftRequest userUpdateShopperShiftRequest) throws ApiException {
        okhttp3.Call localVarCall = updateShopperShiftValidateBeforeCall(userUpdateShopperShiftRequest, null);
        Type localVarReturnType = new TypeToken<UserUpdateShopperShiftResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for updating shopper shift (asynchronously)
     * Refer to summary
     * @param userUpdateShopperShiftRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateShopperShiftAsync(UserUpdateShopperShiftRequest userUpdateShopperShiftRequest, final ApiCallback<UserUpdateShopperShiftResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateShopperShiftValidateBeforeCall(userUpdateShopperShiftRequest, _callback);
        Type localVarReturnType = new TypeToken<UserUpdateShopperShiftResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyAccount
     * @param userAccountVerifyRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyAccountCall(UserAccountVerifyRequest userAccountVerifyRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userAccountVerifyRequest;

        // create path and map variables
        String localVarPath = "/user/verifyAccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyAccountValidateBeforeCall(UserAccountVerifyRequest userAccountVerifyRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userAccountVerifyRequest' is set
        if (userAccountVerifyRequest == null) {
            throw new ApiException("Missing the required parameter 'userAccountVerifyRequest' when calling verifyAccount(Async)");
        }
        

        okhttp3.Call localVarCall = verifyAccountCall(userAccountVerifyRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for verifying a user account
     * Refer to summary
     * @param userAccountVerifyRequest The input body required by this request (required)
     * @return UserAccountVerifyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public UserAccountVerifyResponse verifyAccount(UserAccountVerifyRequest userAccountVerifyRequest) throws ApiException {
        ApiResponse<UserAccountVerifyResponse> localVarResp = verifyAccountWithHttpInfo(userAccountVerifyRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for verifying a user account
     * Refer to summary
     * @param userAccountVerifyRequest The input body required by this request (required)
     * @return ApiResponse&lt;UserAccountVerifyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserAccountVerifyResponse> verifyAccountWithHttpInfo(UserAccountVerifyRequest userAccountVerifyRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyAccountValidateBeforeCall(userAccountVerifyRequest, null);
        Type localVarReturnType = new TypeToken<UserAccountVerifyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for verifying a user account (asynchronously)
     * Refer to summary
     * @param userAccountVerifyRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyAccountAsync(UserAccountVerifyRequest userAccountVerifyRequest, final ApiCallback<UserAccountVerifyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyAccountValidateBeforeCall(userAccountVerifyRequest, _callback);
        Type localVarReturnType = new TypeToken<UserAccountVerifyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
