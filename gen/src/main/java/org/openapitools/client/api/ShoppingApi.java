/*
 * Library Service
 * The library service
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ShoppingAddShopperRequest;
import org.openapitools.client.model.ShoppingAddShopperResponse;
import org.openapitools.client.model.ShoppingGetItemsRequest;
import org.openapitools.client.model.ShoppingGetItemsResponse;
import org.openapitools.client.model.ShoppingGetShoppersRequest;
import org.openapitools.client.model.ShoppingGetShoppersResponse;
import org.openapitools.client.model.ShoppingGetStoresResponse;
import org.openapitools.client.model.ShoppingRemoveQueuedOrderRequest;
import org.openapitools.client.model.ShoppingRemoveQueuedOrderResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ShoppingApi {
    private ApiClient localVarApiClient;

    public ShoppingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ShoppingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addShopper
     * @param shoppingAddShopperRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addShopperCall(ShoppingAddShopperRequest shoppingAddShopperRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shoppingAddShopperRequest;

        // create path and map variables
        String localVarPath = "/shopping/addShopper";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addShopperValidateBeforeCall(ShoppingAddShopperRequest shoppingAddShopperRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shoppingAddShopperRequest' is set
        if (shoppingAddShopperRequest == null) {
            throw new ApiException("Missing the required parameter 'shoppingAddShopperRequest' when calling addShopper(Async)");
        }
        

        okhttp3.Call localVarCall = addShopperCall(shoppingAddShopperRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for adding shopper to shopper list
     * Refer to summary
     * @param shoppingAddShopperRequest The input body required by this request (required)
     * @return ShoppingAddShopperResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ShoppingAddShopperResponse addShopper(ShoppingAddShopperRequest shoppingAddShopperRequest) throws ApiException {
        ApiResponse<ShoppingAddShopperResponse> localVarResp = addShopperWithHttpInfo(shoppingAddShopperRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for adding shopper to shopper list
     * Refer to summary
     * @param shoppingAddShopperRequest The input body required by this request (required)
     * @return ApiResponse&lt;ShoppingAddShopperResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShoppingAddShopperResponse> addShopperWithHttpInfo(ShoppingAddShopperRequest shoppingAddShopperRequest) throws ApiException {
        okhttp3.Call localVarCall = addShopperValidateBeforeCall(shoppingAddShopperRequest, null);
        Type localVarReturnType = new TypeToken<ShoppingAddShopperResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for adding shopper to shopper list (asynchronously)
     * Refer to summary
     * @param shoppingAddShopperRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addShopperAsync(ShoppingAddShopperRequest shoppingAddShopperRequest, final ApiCallback<ShoppingAddShopperResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addShopperValidateBeforeCall(shoppingAddShopperRequest, _callback);
        Type localVarReturnType = new TypeToken<ShoppingAddShopperResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItems
     * @param shoppingGetItemsRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns items upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemsCall(ShoppingGetItemsRequest shoppingGetItemsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shoppingGetItemsRequest;

        // create path and map variables
        String localVarPath = "/shopping/getItems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemsValidateBeforeCall(ShoppingGetItemsRequest shoppingGetItemsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shoppingGetItemsRequest' is set
        if (shoppingGetItemsRequest == null) {
            throw new ApiException("Missing the required parameter 'shoppingGetItemsRequest' when calling getItems(Async)");
        }
        

        okhttp3.Call localVarCall = getItemsCall(shoppingGetItemsRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for Get Items use case
     * Refer to summary
     * @param shoppingGetItemsRequest The input body required by this request (required)
     * @return ShoppingGetItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns items upon success </td><td>  -  </td></tr>
     </table>
     */
    public ShoppingGetItemsResponse getItems(ShoppingGetItemsRequest shoppingGetItemsRequest) throws ApiException {
        ApiResponse<ShoppingGetItemsResponse> localVarResp = getItemsWithHttpInfo(shoppingGetItemsRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for Get Items use case
     * Refer to summary
     * @param shoppingGetItemsRequest The input body required by this request (required)
     * @return ApiResponse&lt;ShoppingGetItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns items upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShoppingGetItemsResponse> getItemsWithHttpInfo(ShoppingGetItemsRequest shoppingGetItemsRequest) throws ApiException {
        okhttp3.Call localVarCall = getItemsValidateBeforeCall(shoppingGetItemsRequest, null);
        Type localVarReturnType = new TypeToken<ShoppingGetItemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for Get Items use case (asynchronously)
     * Refer to summary
     * @param shoppingGetItemsRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns items upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemsAsync(ShoppingGetItemsRequest shoppingGetItemsRequest, final ApiCallback<ShoppingGetItemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemsValidateBeforeCall(shoppingGetItemsRequest, _callback);
        Type localVarReturnType = new TypeToken<ShoppingGetItemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShoppers
     * @param shoppingGetShoppersRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShoppersCall(ShoppingGetShoppersRequest shoppingGetShoppersRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shoppingGetShoppersRequest;

        // create path and map variables
        String localVarPath = "/shopping/getShoppers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShoppersValidateBeforeCall(ShoppingGetShoppersRequest shoppingGetShoppersRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shoppingGetShoppersRequest' is set
        if (shoppingGetShoppersRequest == null) {
            throw new ApiException("Missing the required parameter 'shoppingGetShoppersRequest' when calling getShoppers(Async)");
        }
        

        okhttp3.Call localVarCall = getShoppersCall(shoppingGetShoppersRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for Get Shoppers use case
     * Refer to summary
     * @param shoppingGetShoppersRequest The input body required by this request (required)
     * @return ShoppingGetShoppersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ShoppingGetShoppersResponse getShoppers(ShoppingGetShoppersRequest shoppingGetShoppersRequest) throws ApiException {
        ApiResponse<ShoppingGetShoppersResponse> localVarResp = getShoppersWithHttpInfo(shoppingGetShoppersRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for Get Shoppers use case
     * Refer to summary
     * @param shoppingGetShoppersRequest The input body required by this request (required)
     * @return ApiResponse&lt;ShoppingGetShoppersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShoppingGetShoppersResponse> getShoppersWithHttpInfo(ShoppingGetShoppersRequest shoppingGetShoppersRequest) throws ApiException {
        okhttp3.Call localVarCall = getShoppersValidateBeforeCall(shoppingGetShoppersRequest, null);
        Type localVarReturnType = new TypeToken<ShoppingGetShoppersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for Get Shoppers use case (asynchronously)
     * Refer to summary
     * @param shoppingGetShoppersRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShoppersAsync(ShoppingGetShoppersRequest shoppingGetShoppersRequest, final ApiCallback<ShoppingGetShoppersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShoppersValidateBeforeCall(shoppingGetShoppersRequest, _callback);
        Type localVarReturnType = new TypeToken<ShoppingGetShoppersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStores
     * @param body The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoresCall(Object body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/shopping/getStores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoresValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getStores(Async)");
        }
        

        okhttp3.Call localVarCall = getStoresCall(body, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for Get Stores use case
     * Refer to summary
     * @param body The input body required by this request (required)
     * @return ShoppingGetStoresResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ShoppingGetStoresResponse getStores(Object body) throws ApiException {
        ApiResponse<ShoppingGetStoresResponse> localVarResp = getStoresWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Endpoint for Get Stores use case
     * Refer to summary
     * @param body The input body required by this request (required)
     * @return ApiResponse&lt;ShoppingGetStoresResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShoppingGetStoresResponse> getStoresWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = getStoresValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<ShoppingGetStoresResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for Get Stores use case (asynchronously)
     * Refer to summary
     * @param body The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoresAsync(Object body, final ApiCallback<ShoppingGetStoresResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoresValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<ShoppingGetStoresResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeQueuedOrder
     * @param shoppingRemoveQueuedOrderRequest The input body required by this request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeQueuedOrderCall(ShoppingRemoveQueuedOrderRequest shoppingRemoveQueuedOrderRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shoppingRemoveQueuedOrderRequest;

        // create path and map variables
        String localVarPath = "/shopping/removeQueuedOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeQueuedOrderValidateBeforeCall(ShoppingRemoveQueuedOrderRequest shoppingRemoveQueuedOrderRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shoppingRemoveQueuedOrderRequest' is set
        if (shoppingRemoveQueuedOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'shoppingRemoveQueuedOrderRequest' when calling removeQueuedOrder(Async)");
        }
        

        okhttp3.Call localVarCall = removeQueuedOrderCall(shoppingRemoveQueuedOrderRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint for removing a queued order.
     * Refer to summary
     * @param shoppingRemoveQueuedOrderRequest The input body required by this request (required)
     * @return ShoppingRemoveQueuedOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ShoppingRemoveQueuedOrderResponse removeQueuedOrder(ShoppingRemoveQueuedOrderRequest shoppingRemoveQueuedOrderRequest) throws ApiException {
        ApiResponse<ShoppingRemoveQueuedOrderResponse> localVarResp = removeQueuedOrderWithHttpInfo(shoppingRemoveQueuedOrderRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint for removing a queued order.
     * Refer to summary
     * @param shoppingRemoveQueuedOrderRequest The input body required by this request (required)
     * @return ApiResponse&lt;ShoppingRemoveQueuedOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShoppingRemoveQueuedOrderResponse> removeQueuedOrderWithHttpInfo(ShoppingRemoveQueuedOrderRequest shoppingRemoveQueuedOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = removeQueuedOrderValidateBeforeCall(shoppingRemoveQueuedOrderRequest, null);
        Type localVarReturnType = new TypeToken<ShoppingRemoveQueuedOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint for removing a queued order. (asynchronously)
     * Refer to summary
     * @param shoppingRemoveQueuedOrderRequest The input body required by this request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns upon success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeQueuedOrderAsync(ShoppingRemoveQueuedOrderRequest shoppingRemoveQueuedOrderRequest, final ApiCallback<ShoppingRemoveQueuedOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeQueuedOrderValidateBeforeCall(shoppingRemoveQueuedOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<ShoppingRemoveQueuedOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
